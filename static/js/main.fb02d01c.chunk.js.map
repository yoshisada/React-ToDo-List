{"version":3,"sources":["component/Form.js","component/FilterButton.js","component/Todo.js","todosData.js","App.js","index.js"],"names":["Form","props","useState","name","setName","onSubmit","e","preventDefault","addTask","Grid","container","fullWidth","item","TextField","id","label","variant","color","value","onChange","target","margin","inputProps","style","fontSize","InputLabelProps","width","mr","alignItems","display","Button","datavariant","type","FilterButton","className","isPressed","onClick","setFilter","Todo","handleChange","event","newToDo","tasks","i","length","placeholder","setTasks","changeEditMode","isEditing","spacing","Checkbox","defaultChecked","completed","toggleTaskCompleted","size","defaultValue","refs","j","newTodoTextFormat","text","toLowerCase","replace","trim","placeholderTaskFormat","alert","updateValue","justify","Typography","htmlFor","timestamp","IconButton","deleteTask","marginLeft","todosData","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","App","taskList","filter","defaultTasks","splice","updateTask","map","x","console","log","dateAndTime","filterList","direction","minHeight","minWidth","Box","p","ButtonGroup","orientation","maxWidth","bgcolor","boxShadow","borderRadius","component","taskFormat","nameTaskFormat","newElem","uuid","moment","Date","format","newToDosData","role","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fb02d01c.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Button from '@material-ui/core/Button';\r\nfunction Form(props) {\r\n  const [name, setName] = useState(\"\");\r\n\r\n  function handleChange(e) {\r\n    setName(e.target.value);\r\n  }\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    props.addTask(name);\r\n    setName(\"\");\r\n  }\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <Grid container fullWidth='true'>\r\n        <Grid item>\r\n        <TextField\r\n          id=\"outlined-secondary\"\r\n          label = \"task\"\r\n          variant=\"outlined\"\r\n          color=\"secondary\"\r\n          value={name}\r\n          data-testid=\"new-item-input\"\r\n          onChange={handleChange}\r\n          margin='none'\r\n          inputProps={{style: {fontSize: '2vh'}}}\r\n          InputLabelProps={{style: {fontSize: '2vh'}}}\r\n          style={{ width: '50vw'}}\r\n          mr = {2}\r\n        />\r\n        </Grid>\r\n\r\n        <Grid item alignItems=\"stretch\" style={{ display: \"flex\" }}>\r\n        <Button data-testid=\"new-item-button\" datavariant=\"contained\" color=\"primary\" type=\"submit\" style={{ width: '10vw', fontSize: '2vh'}}>\r\n          add\r\n        </Button>\r\n        </Grid>\r\n      </Grid>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;","import React from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\nfunction FilterButton(props) {\r\n    return (\r\n      <Button style={{fontSize: '2vw'}} className=\"btn toggle-btn\"\r\n      aria-pressed={props.isPressed}\r\n      onClick={() => props.setFilter(props.name)}><span className=\"visually-hidden\">Show </span>\r\n      <span>{props.name}</span>\r\n      <span className=\"visually-hidden\"> tasks</span>\r\n      </Button>\r\n    );\r\n  }\r\n\r\nexport default FilterButton;","import React, { useState } from \"react\";\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport CheckRoundedIcon from '@material-ui/icons/CheckRounded';\r\nimport ClearRoundedIcon from '@material-ui/icons/ClearRounded';\r\n\r\nexport default function Todo(props) {\r\n \r\n  // Render Edit View\r\n  function editingTemp() {\r\n    return (\r\n    <li className=\"todo stack-small\">\r\n    <Grid container fullWidth='true' spacing={1} alignItems=\"center\">\r\n        <Grid item>\r\n        <Checkbox\r\n          id={props.id}\r\n          type=\"checkbox\"\r\n          defaultChecked={props.completed}\r\n          onChange={() => props.toggleTaskCompleted(props.id)}\r\n          size=\"large\"\r\n        />\r\n        </Grid>\r\n\r\n        <Grid item alignItems=\"stretch\" style={{ display: \"flex\" }}>\r\n         <Grid item>\r\n\r\n        {/* user input */}\r\n        <TextField \r\n          type=\"text\"\r\n          id=\"outlined-secondary\"\r\n          label = \"task\"\r\n          variant=\"outlined\"\r\n          color=\"secondary\"\r\n          margin='none'\r\n          defaultValue={props.name}\r\n          onChange={handleChange}\r\n          inputProps={{style: {fontSize: '2vh'}}}\r\n          InputLabelProps={{style: {fontSize: '2vh'}}}\r\n          style={{ width: '50vw'}}\r\n          mr = {2}\r\n          refs = \"Input\"\r\n        />\r\n\r\n        {/* update button */}\r\n         <CheckRoundedIcon onClick={() => updateValue()} style={{ fontSize: 50 , color: \"gray\"}}>\r\n         </CheckRoundedIcon>\r\n         \r\n        {/* cancel button */}\r\n        <ClearRoundedIcon onClick={() => changeEditMode()} style={{ fontSize: 50, color: \"gray\"}}>\r\n        </ClearRoundedIcon>\r\n\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item justify =\"center\" alignItems=\"stretch\" style={{ display: \"flex\" }}>\r\n          <Typography className=\"todo-timestamp\" variant=\"h5\" htmlFor={props.id}>\r\n          {props.timestamp}\r\n          </Typography> \r\n        </Grid>\r\n\r\n        {/* delete button */}\r\n        <Grid item alignItems=\"stretch\" style={{ display: \"flex\" }}>\r\n\r\n        <IconButton\r\n          variant=\"contained\" color=\"red\"\r\n          onClick={() => props.deleteTask(props.id)}\r\n        >\r\n          <DeleteIcon fontSize=\"large\" /> <span className=\"visually-hidden\">{props.name}</span>\r\n        </IconButton>\r\n        \r\n        </Grid>\r\n      </Grid>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  // Render Default View\r\n  function normTemp() {\r\n    return (\r\n  <li className=\"todo stack-small\">\r\n    <Grid container fullWidth='true' spacing={1} alignItems=\"center\">\r\n        <Grid item>\r\n        <Checkbox\r\n          id={props.id}\r\n          type=\"checkbox\"\r\n          defaultChecked={props.completed}\r\n          onChange={() => props.toggleTaskCompleted(props.id)}\r\n          size=\"large\"\r\n        />\r\n        </Grid>\r\n\r\n        <Grid item alignItems=\"stretch\" style={{ display: \"flex\" }}>\r\n        <Typography className=\"todo-label\" variant=\"h3\" htmlFor={props.id}>\r\n          {props.name}\r\n        </Typography>\r\n        \r\n        </Grid>\r\n\r\n        {/* edit button */}\r\n        <Grid item alignItems=\"stretch\" style={{ display: \"flex\" }}>\r\n\r\n        <IconButton\r\n          variant=\"contained\" color=\"red\"\r\n          onClick={() => changeEditMode()}\r\n        >\r\n          <EditIcon fontSize=\"large\" /> <span className=\"visually-hidden\">{props.name}</span>\r\n        </IconButton>\r\n        \r\n        </Grid>\r\n\r\n\r\n        {/* delete button */}\r\n        <Grid item alignItems=\"stretch\" style={{ display: \"flex\" }}>\r\n\r\n        <IconButton\r\n          variant=\"contained\" color=\"red\"\r\n          onClick={() => props.deleteTask(props.id)}\r\n        >\r\n          <DeleteIcon fontSize=\"large\" /> <span className=\"visually-hidden\">{props.name}</span>\r\n        </IconButton>\r\n        </Grid>\r\n\r\n        <Grid container alignItems=\"center\" >\r\n\r\n          <Grid item margin=\"left\" alignItems=\"stretch\" style={{ marginLeft: 45}}>\r\n            <Typography className=\"todo-timestamp\" variant=\"h5\" htmlFor={props.id}>\r\n            {props.timestamp}\r\n            </Typography> \r\n          </Grid>    \r\n           \r\n        </Grid>\r\n\r\n      </Grid>\r\n      </li>\r\n    );\r\n  }\r\n\r\n  // Store changes from textfield into a placeholder\r\n  function handleChange(event) {\r\n    const id = props.id\r\n    const newToDo = [...props.tasks];\r\n\r\n    for (let i = 0; i < newToDo.length; i++) {\r\n        if (newToDo[i].id == id) {\r\n            newToDo[i].placeholder = event.target.value\r\n        }\r\n    }\r\n    props.setTasks(newToDo);\r\n  }\r\n\r\n  // Update condition of current mode\r\n  function changeEditMode() {\r\n    const id = props.id\r\n    const newToDo = [...props.tasks];\r\n\r\n    for (let i = 0; i < newToDo.length; i++) {\r\n        if (newToDo[i].id == id) {\r\n            newToDo[i].isEditing = !(newToDo[i].isEditing)\r\n        }\r\n    }\r\n    props.setTasks(newToDo);\r\n  }\r\n\r\n  // Set text equal to stored value (placeholder) once user wants to update\r\n function updateValue() {\r\n    const id = props.id\r\n    const newToDo = [...props.tasks];\r\n\r\n    for (let i = 0; i < newToDo.length; i++) {\r\n        if (newToDo[i].id == id) {\r\n            for (let j = 0; j < newToDo.length; j++) {\r\n              //make all tasks only have maximum one space inbetween and all lowercase for data validation\r\n              let newTodoTextFormat = newToDo[j].text.toLowerCase();\r\n              newTodoTextFormat = newTodoTextFormat.replace(/[\\n\\r\\s\\t]+/g, ' ').trim()\r\n              let placeholderTaskFormat = newToDo[i].placeholder.toLowerCase();\r\n              placeholderTaskFormat = placeholderTaskFormat.replace(/[\\n\\r\\s\\t]+/g, ' ').trim()\r\n              if (newTodoTextFormat == placeholderTaskFormat) {\r\n                return( \r\n                  alert(\"Error: This task already exists. Please enter a new task\")\r\n                ); \r\n              }\r\n            }\r\n            newToDo[i].text = newToDo[i].placeholder\r\n            newToDo[i].isEditing = false\r\n        } \r\n    }\r\n    props.setTasks(newToDo);\r\n}\r\n\r\n  // toggle between two different views depending on condition of isEditing\r\n  return (\r\n    props.isEditing ? editingTemp() : normTemp()\r\n  );\r\n}\r\n","import uuid from \"react-uuid\"\r\nimport moment from \"moment\"\r\nconst todosData = []\r\n/*\r\nconst todosData = [\r\n    {\r\n        id: uuid(),\r\n        text: \"HackerRank Interview Prep Kit\",\r\n        dateAndTime: new Date().toLocaleString(),\r\n        completed: true,\r\n        isEditing: false,\r\n        placeholder: \"\",\r\n\r\n    },\r\n    {\r\n        id: uuid(),\r\n        text: \"“Learn DS & Algorithms” course from Programiz\",\r\n        dateAndTime: new Date().toLocaleString(),\r\n        completed: false,\r\n        isEditing: false,\r\n        placeholder: \"\",\r\n    },\r\n    {\r\n        id: uuid(),\r\n        text: \"Watch React Hooks video \",\r\n        dateAndTime: new Date().toLocaleString(),\r\n        completed: false,\r\n        isEditing: false,\r\n        placeholder: \"\",\r\n\r\n    },\r\n    {\r\n        id: uuid(),\r\n        text: \"Watch Material UI video\",\r\n        dateAndTime: new Date().toLocaleString(),\r\n        completed: false,\r\n        isEditing: false,\r\n        placeholder: \"\",\r\n\r\n    },\r\n    {\r\n        id: uuid(),\r\n        text: \"Read React Docs\",\r\n        dateAndTime: new Date().toLocaleString(),\r\n        completed: false,\r\n        isEditing: false,\r\n        placeholder: \"\",\r\n\r\n    }\r\n]\r\n*/\r\n\r\nexport default todosData\r\n","import './App.css';\r\n\r\n\r\n// Structure of Program\r\n// - The add task is handled by a form in component/form.js.  ** the spacing for this is a bit whack and could be touched up a bit.\r\n// - component/FilterButton.js is the formatting for the side Buttons .\r\n// - component/todo.js is the formatting and display for the todolist items.\r\n// - the mapping of the list is handled in this File, and is combined with some .filter logic to seperate the completed and \r\n// umcompleted tasks, i dont think much needs to be touched here, but feel free to fix if needed.\r\n// - The data for the tasks is passed into App.js from index.js, the array for the tasks is stored in ./todosData.js \r\n//   - to access the data inside the App.js file do tasks.\"property name\"\r\n// - The index.css file is leftover from some of the tutorial i tinkered around with,  I think we should remove this by the end, \r\n// but some of it still needs to be migrated over to material ui \r\n\r\n\r\n// What is left to is do:\r\n// - update list items\r\n// - clean up some spaces where items are not using material ui and make the formatting cleaner \r\n// - just clean up some of the UI and Code.\r\n// - cleanup import statements\r\n\r\n\r\n// possible future features:\r\n// - dropdown item per list item to show Description, and Details\r\n// - more complicated add form to accomdate more Details.\r\n\r\nimport React, { useState } from \"react\";\r\nimport moment from 'moment';\r\nimport '@fontsource/roboto';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Box from '@material-ui/core/Box';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Form from \"./component/Form\";\r\nimport FilterButton from \"./component/FilterButton\";\r\nimport Todo from \"./component/Todo\";\r\nimport { BluetoothConnectedRounded, Code, Description, Details, HelpRounded, NearMeRounded } from '@material-ui/icons';\r\nimport todosData from './todosData';\r\nimport { ButtonBase, Input, ListItemSecondaryAction, TextField } from '@material-ui/core';\r\nimport { isDOMComponentElement } from 'react-dom/test-utils';\r\nimport uuid from 'react-uuid'\r\n\r\n\r\n// this when called will assign and generate the filters.  to add more filters add a label with a following conditional\r\nconst FILTER_MAP = {\r\n  All: () => true,\r\n  Active: task => !task.completed,\r\n  Completed: task => task.completed\r\n};\r\nconst FILTER_NAMES = Object.keys(FILTER_MAP);\r\n\r\n\r\nfunction App(props) {\r\n  const [filter, setFilter] = useState('All');\r\n  const [tasks, setTasks] = useState(props.tasks);\r\n  if(tasks == null){\r\n    const defaultTasks = [...todosData]\r\n    setTasks(defaultTasks);\r\n  }\r\n  console.log(tasks);\r\n\r\n  function addTask(name) {\r\n    //code for new task to go here, will need to call settasks() or something.\r\n   /*\r\n    Empty string/null check for input, doesn't display error message \r\n    */\r\n   if(name.length <= 0){\r\n      return(\r\n         alert(\"Error: Please enter a full string\")\r\n      ); \r\n   }\r\n\r\n    for (let i = 0; i < tasks.length; i++) {\r\n      //make all tasks only have maximum one space inbetween and all lowercase for data validation\r\n      let taskFormat = tasks[i].text.toLowerCase();\r\n      taskFormat = taskFormat.replace(/[\\n\\r\\s\\t]+/g, ' ').trim();\r\n\r\n      let nameTaskFormat = name.toLowerCase();\r\n      nameTaskFormat = nameTaskFormat.replace(/[\\n\\r\\s\\t]+/g, ' ').trim();\r\n      if (taskFormat === nameTaskFormat) {\r\n        return( \r\n          alert(\"Error: This task already exists. Please enter a new task\")\r\n        ); \r\n      }\r\n\r\n\r\n    }\r\n\r\n  /*\r\n  After checking if string is empty and if the task in repeated, then can push onto list\r\n  */\r\n    let newElem = (\r\n      { \r\n        id: uuid(), \r\n        text: name,\r\n        dateAndTime: new moment(Date()).format(\"MMM Do YYYY LT\"),\r\n        completed: false\r\n      }\r\n    );\r\n    const newToDosData = [...tasks, newElem]; \r\n    setTasks(newToDosData);\r\n  }\r\n\r\n  function deleteTask(id) {\r\n    const newToDo = [...tasks];\r\n\r\n    // Find and delete specified task\r\n    for (let i = 0; i < newToDo.length; i++) {\r\n        if (newToDo[i].id == id) {\r\n            newToDo.splice(i, 1);\r\n        }\r\n    }\r\n    setTasks(newToDo);\r\n  }\r\n\r\n  function updateTask(id) {\r\n\r\n  }\r\n\r\n  function toggleTaskCompleted(id) {\r\n    //code for marking items as complete will go here, should call settasks or something.\r\n\r\n    /*\r\n    ranges through the todosData to find the matching id with the id to be completed;\r\n    if finds task, then marks as complete; else maintains the original task completion state\r\n    */\r\n    tasks.map(x => x.id == id ? x.completed = !x.completed : x.completed = x.completed);\r\n  }\r\n\r\n  \r\n  //this uses the array.map function as required in the instrucitons\r\n  var taskList;\r\n  if (tasks == null){\r\n    taskList = todosData.map(task => (\r\n      <Todo\r\n        id={task.id}\r\n        name={task.text}\r\n        timestamp={task.dateAndTime}\r\n        completed={task.completed}\r\n        key={task.id}\r\n        toggleTaskCompleted={toggleTaskCompleted}\r\n        deleteTask={deleteTask}\r\n        updateTask={updateTask}\r\n      />\r\n    ));\r\n  }\r\n  else {taskList = tasks.filter(FILTER_MAP[filter]).map(task => (\r\n    <Todo\r\n      id={task.id}\r\n      name={task.text}\r\n      timestamp={task.dateAndTime}\r\n      completed={task.completed}\r\n      key={task.id}\r\n      toggleTaskCompleted={toggleTaskCompleted}\r\n      deleteTask={deleteTask}\r\n      setTasks = {setTasks}\r\n      isEditing = {task.isEditing}\r\n      placeholder = {task.placeholder}\r\n      tasks = {tasks}\r\n\r\n    />\r\n  ));}\r\n  const filterList = FILTER_NAMES.map(name => (\r\n    <FilterButton\r\n      key={name}\r\n      name={name}\r\n      isPressed={name === filter}\r\n      setFilter={setFilter}\r\n    />\r\n  ));\r\n  \r\n  return (\r\n    //these grid things are pretty important any time you need items to be vertically aligned a grid should probably be used.\r\n    <Grid\r\n      container\r\n      spacing={0}\r\n      direction=\"row\"\r\n      alignItems=\"center\"\r\n      justify=\"left\"\r\n      style={{ minHeight: '100vh', minWidth: '99vw' }}\r\n    >\r\n      <Box color=\"text.primary\"  p={4} alignItems=\"center\" justify=\"center\" style={{ width: '20vw' }}>\r\n      <ButtonGroup\r\n        orientation=\"vertical\"\r\n        color=\"text.primary\"\r\n        aria-label=\"vertical contained primary button group\"\r\n        variant=\"text\"\r\n        style={{maxWidth: '20vw', minWidth: '10vw'}}\r\n      >\r\n        {/* this is where filter list is called and the tasks will appear based on which filter tab is active */}\r\n        {filterList}\r\n      </ButtonGroup>\r\n      </Box>\r\n\r\n      <Box color=\"text.primary\" bgcolor=\"rgba(0,0,10,0.2)\" p={4} boxShadow={3} borderRadius={16}style={{ width: '70vw' }} >\r\n        <Typography variant=\"h2\" component=\"h3\" margin = 'dense'>\r\n          Group 38 To Do List \r\n        </Typography>\r\n        \r\n        <Form addTask={addTask} />\r\n        <div className=\"filters btn-group stack-exception\">\r\n          \r\n        </div>\r\n        <h2 id=\"list-heading\"> Size: {taskList.length}</h2> \r\n          {/* this needs to be in material.ui typography */}\r\n          {/* this should also be left justified list and should somehow be implemented in material ui*/}\r\n        <ul\r\n          role=\"list\"\r\n          className=\"stack-large stack-exception\"\r\n          aria-labelledby=\"list-heading\"\r\n        >\r\n          {taskList}\r\n        </ul>\r\n      </Box>\r\n    </Grid>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport todosData from \"./todosData\";\r\n\r\nReactDOM.render(\r\n     <App tasks = {todosData}/>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}